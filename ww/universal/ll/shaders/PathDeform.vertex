//<script id="PathDeformVertexShader" type="x-shader/x-vertex">
#line 1 100
#define float2 vec2
#define float3 vec3
#define float4 vec4

const float PI                	= 3.1415926535897;
const float TWOPI               = 2.0 * PI;
const float DEG_TO_RAD          = PI / 180.0;
const float RAD_TO_DEG          = 180.0 / PI;

#ifdef DO_LINEAR_FILTERING
const float2 PathTextureSize = float2( 1024.0, 2.0 );
#endif

// v02
const float LogoBeginT = 1346.0 / 4096.0;
const float LogoEndT = 2808.0 / 4096.0;
// v01
//const float LogoBeginT = 1407.0 / 4096.0;
//const float LogoEndT = 2722.0 / 4096.0;

//#define WAVE1_PARTICLES (60.0 * 8.0)
uniform float WAVE1_PARTICLES; // turned into a uniform

uniform sampler2D PathSampler;
uniform sampler2D PathOffsetSampler;
uniform sampler2D CubeAttrib1Map;
uniform float2 TexSection;
uniform float WidthInv;
uniform float HeightInv;
uniform float PathScale;
uniform float MeshScale;
uniform float Time;
uniform float DoRotation;
uniform float2 Dim;
uniform float LogoDepthScale;
//		uniform float ParticleDivisor;
//uniform float OffsetGlobalScale;
//		uniform float Wave1KillTime;
uniform float2 Wave1ScaleAndOffset;

attribute float4 ParticleColorAndIndex;
attribute float3 ParticleOffsetDirectionVector;
attribute float3 ParticleScale;

varying vec3 worldPosition;
//varying vec3 positionVS;
varying vec2 texcoord;
varying vec4 diffuse;
#ifndef DO_STD_DERIVATIVES
    varying vec3 worldNormal;
#endif

#ifdef TWITTER_API
    varying float doColorAnimation;
#endif

#ifdef LASTFM_API
    const float3 greyColor = float3( 0.3, 0.3, 0.3 );
    const float3 redColor = float3( 2.0, 0.0, 0.0 );
#endif

#ifdef FACEBOOK_API
    const vec2 MatrixTextureSize = vec2( 4096.0, 2048.0 );
    const vec2 TileSize = vec2( 144.0, 256.0 );
#endif

float Saturate( in float x )	{ return clamp( x, 0.0, 1.0 ); }
vec3 Saturate( in vec3 x )      { return clamp( x, vec3(0.0), vec3(1.0) ); }


float easeOutQuad( float t, float b, float c, float d)
{
    t /= d;
    return -c * t*(t-2.0) + b;
}

mat3 RotateXYZ( float rotX, float rotY, float rotZ )
{
    rotX *= TWOPI;
    rotY *= TWOPI;
    rotZ *= TWOPI;
    float sx = sin(rotX);
    float cx = cos(rotX);
    float sy = sin(rotY);
    float cy = cos(rotY);
    float sz = sin(rotZ);
    float cz = cos(rotZ);
    
    return mat3( cz*cy+sz*sx*sy, sz*cx, cz*-sy+sz*sx*cy,
                -sz*cy+cz*sx*sy, cz*cx, sz*sy+cz*sx*cy,
                cx * sy       ,-sx   , cx * cy );
}

#ifdef DO_LINEAR_FILTERING
// From: http://iquilezles.org/www/articles/texture/texture.htm
vec4 IQGetTexel( sampler2D source, vec2 p, vec2 size )
{
    p = p*size + 0.5;
    
    vec2 i = floor(p);
    vec2 f = p - i;
    f = f*f*f*(f*(f*6.0-15.0)+10.0);
    p = i + f;
    
    p = (p - 0.5) / size;
    return texture2DLod( source, p, 0.0 );
}

float4 Bilinear( sampler2D source, float2 uv, float2 size )
{
    float2 integerUV = uv * size;
    float2 floorUV = floor( integerUV );
    float2 ceilUV = floorUV + float2( 1.0, 1.0 );
    
    float2 f = integerUV - floorUV;
    
    floorUV *= 1.0 / size;
    ceilUV *= 1.0 / size;
    
    //float4 s1 = IQGetTexel( source, floorUV, size );
    //float4 s3 = IQGetTexel( source, float2( ceilUV.x, floorUV.y ), size );
    float4 s1 = texture2DLod( source, floorUV, 0.0 );
    //            float4 s2 = texture2DLod( source, float2( floorUV.x, ceilUV.y ), 0.0 );
    float4 s3 = texture2DLod( source, float2( ceilUV.x, floorUV.y ), 0.0 );
    //            float4 s4 = texture2DLod( source, ceilUV, 0.0 );
    
    return mix( s1, s3, f.x );
    //float4 v1 = mix( s1, s2, f.y );
    //float4 v2 = mix( s3, s4, f.y );
    //return mix( v1, v2, f.x );
}
#endif

// Assumes x is already normalized, and x stays as it is
void GramSchmidtOrthoNormalize( float3 x, inout float3 y, inout float3 z )
{
    y = y - dot(x,y)*x;
    y = normalize(y);
    
    z = z - dot(x,z)*x - dot(y,z)*y;
    z = normalize(z);
}

float4 FetchTexel( sampler2D source, float2 uv )
{
#ifdef DO_LINEAR_FILTERING
    return Bilinear( source, uv, PathTextureSize );
#else
    return texture2D( source, uv );
#endif
}

vec3 rotateVectorByQuaternion( vec3 v, vec4 q )
{
    vec3 dest = vec3( 0.0 );
    
    float x = v.x, y  = v.y, z  = v.z;
    float qx = q.x, qy = q.y, qz = q.z, qw = q.w;
    
    // calculate quaternion * vector
    
    float ix =  qw * x + qy * z - qz * y,
    iy =  qw * y + qz * x - qx * z,
    iz =  qw * z + qx * y - qy * x,
    iw = -qx * x - qy * y - qz * z;
    
    // calculate result * inverse quaternion
    
    dest.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    dest.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    dest.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    
    return dest;
    
}

vec4 axisAngleToQuaternion( vec3 axis, float angle )
{
    vec4 dest = vec4( 0.0 );
    
    float halfAngle = angle / 2.0,
    s = sin( halfAngle );
    
    dest.x = axis.x * s;
    dest.y = axis.y * s;
    dest.z = axis.z * s;
    dest.w = cos( halfAngle );
    
    return dest;
    
}

const int PathLerpSize = 16;
const float PathLerpSizef = 16.0;
float PathLerpData[ PathLerpSize ];

float GetPathLerp( float t )
{
    if( t <= 0.0 ) return PathLerpData[ 0 ];
    if( t >= 1.0 ) return PathLerpData[ PathLerpSize-1 ];

    float numSpans = PathLerpSizef - 1.0;
    float span = floor( t * numSpans );
    float lerpT = ( t - span / numSpans ) * numSpans;
    int spanI = int( span );
    float currentValue = 0.0;
    float nextValue = 0.0;
    for( int i=0; i<PathLerpSize; i++ )
    {
        if( i == spanI )
        {
            currentValue = PathLerpData[ i ];
            nextValue = PathLerpData[ i+1 ];
            break;
        }
    }
    return currentValue * ( 1.0 - lerpT ) + nextValue * lerpT;
}


void main()
{
    // Logo Thickness along the path
    PathLerpData[ 0] = 2.154;
    PathLerpData[ 1] = 2.407;
    PathLerpData[ 2] = 3.35;
    PathLerpData[ 3] = 5.59;
    PathLerpData[ 4] = 4.85;
    PathLerpData[ 5] = 4.75;
    PathLerpData[ 6] = 4.9;
    PathLerpData[ 7] = 3.66;
    PathLerpData[ 8] = 4.03;
    PathLerpData[ 9] = 2.85;
    PathLerpData[10] = 3.29;
    PathLerpData[11] = 4.90;
    PathLerpData[12] = 6.89;
    PathLerpData[13] = 6.89;
    PathLerpData[14] = 6.96;
    PathLerpData[15] = 7.20;

    float xstep = WidthInv;
    float ystep = HeightInv;
    float xoffset = 0.5 * xstep;
    float yoffset = 0.5 * ystep;

    float partDoRotate = ParticleColorAndIndex.w;
    float partIndex = color.z;

    vec2 oxoff = vec2( mod(partIndex, Dim.x)/Dim.x, 1.0-(floor(partIndex/Dim.x)/Dim.y) );
    vec4 currOffset = texture2D( PathOffsetSampler, oxoff );
    vec4 attrib1 = texture2D( CubeAttrib1Map, oxoff );
    
    bool isWave1 = partIndex < WAVE1_PARTICLES;
    
    float3 partOffsetDir = ParticleOffsetDirectionVector.xyz;

    float partOffsetDistance = attrib1.b;

    float fadeT = 0.01;
    float partTargetT = currOffset.g;
    float partTriggerTime = attrib1.a; //currOffset.b;
    float pathT = currOffset.a;

    float scal = 1.0;
    
    // As the curves begin/end at 1.0 we multiply both which does the same as the branch
    if( currOffset.b > 0.0 )
    {
        scal = (pathT >= LogoBeginT ) ? smoothstep( LogoBeginT, LogoBeginT+fadeT, pathT ) : 1.0;
        scal *= smoothstep( LogoEndT, LogoEndT-fadeT, pathT );
        scal = Saturate( scal );
    }

    // offset from center for first wave is 50% of global offset
    float offsetTScale = ( isWave1 ) ? partOffsetDistance * 0.5 : partOffsetDistance;
    //offsetTScale *= 1.0-clamp( Time/7.0, 0.0, 1.0 );
    offsetTScale *= 1.0-clamp( (Time-partTriggerTime)/3.0, 0.0, 1.0 );
    //offsetTScale *= 1.0-smoothstep( 0.0, LogoBeginT, pathT );
    //float offsetTScale = ( isWave1 ) ? OffsetGlobalScale * 0.5 : OffsetGlobalScale;

    
    // Get vertex pos and apply scaling
    vec3 vertexPos = position;
    vertexPos *= ParticleScale.xyz;

#ifdef LASTFM_API
    // Spectum effect on lastfm
    float lastfmTime = Time - partTriggerTime;
    vertexPos.x -= abs(sin( lastfmTime*2.0 + vertexPos.x*8.61 )) * vertexPos.x * 0.5 * step( partTriggerTime, Time );
#endif

    float xxx = 1.0;
    
    // Scale up only the front partiles
    if( isWave1 )
    {
#ifdef INSTAGRAM_API
        float t000 = (1.0 - smoothstep( 0.0, LogoBeginT, pathT ));
#endif
#ifdef TWITTER_API
        float t000 = (1.0 - smoothstep( 0.0, partTargetT, pathT ));
#endif
#ifdef NYTIMES_API
        float t000 = (1.0 - smoothstep( 0.0, partTargetT, pathT ));
#endif
#ifdef AMAZON_API
        float t000 = (1.0 - smoothstep( 0.0, LogoBeginT, pathT ));
#endif
#ifdef LASTFM_API
        float t000 = (1.0 - smoothstep( 0.0, LogoBeginT, pathT ));
#endif

        scal *= t000 * Wave1ScaleAndOffset.x;
        scal += Wave1ScaleAndOffset.y;
        vertexPos.x *= scal;
        vertexPos.y *= scal;
        vertexPos.z *= scal; // * 0.2;
        // restore scal to 1.0
        scal = 1.0;
        
        xxx = 0.0;
    }

    
    // Scale particles on spawn
    if( Time >= partTriggerTime && !isWave1 )
    {
        float partTiming = clamp( Time-partTriggerTime, 0.0, Time );
        float t = Saturate( partTiming*0.2 );
        vertexPos *= t;
    }


//    float offsetT = (1.0 - smoothstep( 0.0, LogoBeginT, pathT )) * offsetTScale;
    float offsetT = (1.0-Saturate( Time*0.075+pathT*0.25 )) * offsetTScale;

    vec2 pathUV = vec2( 0.0, 0.0 );
    pathUV.x = clamp( PathScale * vertexPos.x + pathT + xoffset, 0.0, 1.0 );
    pathUV.y = yoffset;
    vec2 prevPathUV = pathUV - vec2( xoffset, 0.0 );
    prevPathUV.x = clamp( prevPathUV.x, 0.0, 1.0 );
    
    // Get path positions
    vec3 curr = FetchTexel( PathSampler, pathUV ).xyz;
    vec3 prev = FetchTexel( PathSampler, prevPathUV ).xyz;
    
//		    // Add offset from path center
//		    curr.yz += currOffset.rg * offsetT;
//		    prev.yz += currOffset.rg * offsetT;

    // Compute path direction
    vec3 pathDir = normalize( curr - prev );

    // Get path normal
    pathUV.x = clamp( pathT + xoffset, 0.0, 1.0 );
    pathUV.y = clamp( pathUV.y + ystep, 0.0, 1.0 );
    vec3 norm = FetchTexel( PathSampler, pathUV ).xyz;
    vec3 pathNormal = normalize( norm );

    // Flatten normal Z when posZ is near or zero
    pathNormal.z = mix( 0.0, pathNormal.z, Saturate( curr.z*0.05 ) );
    //pathNormal.z *= Saturate( curr.z*0.001 );
    
    // Compute basis matrix
    vec3 right = ( cross( pathDir, pathNormal ) );
    
//		    GramSchmidtOrthoNormalize( right, pathNormal, pathDir );
    
    mat3 basis = mat3( pathDir, pathNormal, right );
    
    //float sss = 1.0 + (5.0 - clamp( Time*3.85, 0.0, 5.0 ));
    
    // Deform vertex
    vec3 spoke = vec3( 0.0, vertexPos.yz ) * MeshScale * scal;
#ifndef DO_STD_DERIVATIVES
    float3 normal2 = normal.xyz;
#endif


#ifdef AMAZON_API

    // Rotate point in object space (only big particles)
    float angleX = ( pathT*0.7 + currOffset.r*0.1691 + Time*20.0*DEG_TO_RAD ) * partDoRotate;
    mat3 rot = RotateXYZ( angleX, 0.0, 0.0 );
    spoke = rot * spoke;

#ifndef DO_STD_DERIVATIVES
    normal2 = rot * normal.xyz;
#endif


    float3 newSpoke = basis * spoke;
    
    float spiralRads = ((Time*1.51 + curr.x*0.1 + oxoff.x * 1164.0) * xxx) * step( LogoBeginT, pathT );
    vec3 pathNorm2 = pathNormal;
    
    vec4 rotation = vec4( pathDir, spiralRads );
    vec4 qRotation = axisAngleToQuaternion( rotation.xyz, rotation.w );
    
    // Offset vertex along the path normal
    newSpoke += partOffsetDir.xyz * currOffset.r + offsetT * partOffsetDir.xyz; // + pathNormal * offsetT;
    
    newSpoke = rotateVectorByQuaternion( newSpoke, qRotation );
#ifndef DO_STD_DERIVATIVES
    float3 newNormal2 = rotateVectorByQuaternion( normal2, qRotation );
#endif

#else

    // Rotate point in object space
#ifdef INSTAGRAM_API
    float angleX = (pathT*0.7 + currOffset.r*0.1691 + Time*20.0*DEG_TO_RAD) * partDoRotate;
#endif
#ifdef NYTIMES_API
    float angleX = (pathT*1.0 + currOffset.r*0.1691 + Time*30.0*DEG_TO_RAD) * partDoRotate;
#endif
#ifdef LASTFM_API
    float angleX = (pathT*0.4 + currOffset.r*0.1691 + Time*10.0*DEG_TO_RAD) * partDoRotate;
#endif
#ifdef TWITTER_API
    float angleX = 0.0;
#endif

    mat3 rot = RotateXYZ( angleX, 0.0, 0.0 );
    spoke = rot * spoke;

#ifndef DO_STD_DERIVATIVES
    normal2 = rot * normal.xyz;
#endif
    
    vec3 newSpoke = basis * spoke;
#ifndef DO_STD_DERIVATIVES
    float3 newNormal2 = normal2;
#endif


    // Offset vertex along the path normal
    //float3 pathOffsetDirCustom = float3( partOffsetDir.x * offsetT, partOffsetDir.y * offsetT, partOffsetDir.z * (offsetT+0.0) );
    float3 pathOffsetDirCustom = float3( partOffsetDir.x * offsetT, partOffsetDir.y * offsetT, partOffsetDir.z * (offsetT+LogoDepthScale) );
    newSpoke += pathNormal.xyz * currOffset.r + pathOffsetDirCustom;
    // Offset vertex along the path normal
    //newSpoke += pathNormal.xyz * currOffset.r + offsetT * partOffsetDir;
    
#endif // end AMAZON_API

    // v02
    //float t02 = clamp( (pathT-LogoBeginT), 0.0, LogoBeginT ) / (LogoEndT);
    float t02 = clamp( (pathT-LogoBeginT)/(LogoEndT-LogoBeginT), 0.0, 1.0 );
    //float t02 = smoothstep( LogoBeginT, LogoEndT, pathT );

    float sdt = Time*0.11;
    float stb = clamp( sdt*sdt, 0.0, 1.0 );
    float ste = 1.0 - step( t02, 0.0 );
    float st = mix( 0.0, ste, stb );
    float value = GetPathLerp( t02 ) / PathLerpData[ 0 ];
    vec3 newSpokeLerp = mix( newSpoke, newSpoke * value * 0.5, st );
    vec3 animPos = curr + newSpokeLerp;

#ifndef DO_STD_DERIVATIVES
    vec3 animNorm = basis * newNormal2.xyz;
#endif

    // Do not see vertex unless its time to display it
    // So we offset it way outside the screen
    animPos.x = ( Time < partTriggerTime ) ? -50000.0 : animPos.x;

    // World transformations
    vec4 pos = vec4( animPos, 1.0 );
    
    worldPosition = pos.xyz;
    //positionVS = (modelViewMatrix * pos).xyz;
#ifndef DO_STD_DERIVATIVES
    worldNormal = normalize( animNorm.xyz );
#endif


#ifdef FACEBOOK_API
    vec2 offset = color.xy;

    // UVs
    vec2 tileSize = TileSize.xy / MatrixTextureSize.xy;  // Portrait
    if( offset.y >= 0.5 )
        tileSize = TileSize.yx / MatrixTextureSize.xy;  // Landscape

    // Flip as opengl has textures with 0,0 at bottom left
    offset.y = 1.0 - offset.y;
    // Start at the bottom of the tile. textures are flipped so we draw from bottom of tile to the top
    offset.y -= tileSize.y;

    vec2 uv2 = vec2( 1.0 - uv.x, uv.y );
    texcoord = offset + uv2 * tileSize;
#else
    texcoord = color.xy + uv.xy * TexSection; // TexSection is normalized from cpu side
    texcoord.x = 1.0 - texcoord.x;
#endif

#ifdef TWITTER_API
    doColorAnimation = step( partIndex, WAVE1_PARTICLES+512.0 ) * step( 5.0, Time );
#endif

    diffuse = float4( ParticleColorAndIndex.xyz, 1.0 );

    gl_Position = projectionMatrix * modelViewMatrix * pos;
    
}
//</script>