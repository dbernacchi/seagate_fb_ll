#ifdef DO_STD_DERIVATIVES
#extension GL_OES_standard_derivatives : enable
#endif

#define float2 vec2
#define float3 vec3
#define float4 vec4

const float PI                	= 3.1415926535897;
const float TWOPI               = 2.0 * PI;
const float DEG_TO_RAD          = PI / 180.0;
const float RAD_TO_DEG          = 180.0 / PI;

const float Gamma              	= 2.2;
const float InvGamma            = 1.0 / Gamma;
const vec3  LumCoeff            = vec3(0.2125, 0.7154, 0.0721);
vec3 ToLinear( vec3 v )         { return pow( v, vec3( Gamma ) ); }
vec3 ToSRGB( vec3 v )           { return pow( v, vec3( InvGamma ) ); }
float Intensity( vec3 color )   { float intensity = dot( color, LumCoeff ); return intensity; }

uniform sampler2D DiffuseMap;
uniform vec3 ViewPosition;
uniform vec4 LightPosition;
uniform vec3 LightColor;
// uniform vec4 DiffuseColor;
uniform float Time;
uniform float AlphaIntensity;

varying vec3 worldPosition;
//varying vec3 positionVS;
#ifndef DO_STD_DERIVATIVES
    varying vec3 worldNormal;
#endif
varying vec2 texcoord;
varying vec4 diffuse;

#ifdef TWITTER_API
    varying float doColorAnimation;
#endif

/*
// http://content.gpwiki.org/index.php/D3DBook:(Lighting)_Oren-Nayar
// http://fgiesen.wordpress.com/2010/10/21/finish-your-derivations-please/
float oren_nayar( vec3 v, vec3 n, vec3 l, float roughness )
{
    
    // Compute the other aliases
    float gamma   = dot ( v - n * dot( v, n ),
                         l - n * dot( l, n ) );
    
    float rough_sq = roughness * roughness;
    float A = 1.0 - 0.5 * (rough_sq / (rough_sq + 0.57));
    float B = 0.45 * (rough_sq / (rough_sq + 0.09));
    
    float vdotn = dot(v, n);
    float ldotn = dot(l, n);
    float C = sqrt((1.0 - vdotn*vdotn) * (1.0 - ldotn*ldotn)) / max(vdotn, ldotn);
    
    float final = (A + B * max( 0.0, gamma ) * C);
    
    return max( 0.0, dot( n, l ) ) * final;
}
*/

float nrand( vec2 n )
{
    return fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);
}

void main()
{
    float4 FinalColor = float4( 0.0, 0.0, 0.0, 1.0 );
    
    float4 colorTexel = texture2D( DiffuseMap, texcoord );
    colorTexel.rgb = ToLinear( colorTexel.rgb );
    
    // directional light
    const vec3 lightDir1 = vec3( 0.2, -0.4, -0.7 );
    const float intensity1 = 0.5;
    float3 L = normalize( LightPosition.xyz - worldPosition*LightPosition.w );
    float3 V = normalize( ViewPosition - worldPosition );

#ifdef DO_STD_DERIVATIVES
    vec3 N = normalize( cross( dFdx(worldPosition), dFdy(worldPosition) ) );
    //vec3 N = normalize(cross(dFdx(positionVS), dFdy(positionVS)));
#else
    vec3 N = worldNormal.xyz;
#endif

    float NdotL = dot(N, L) * 0.5 + 0.5;

    float intens = Intensity( colorTexel.rgb ) * 0.2;
    
    // Blinn
    const float specularPower = 60.0;
    vec3 H = normalize( L + V );
    float specular = pow( max( 0.0, dot(N, H) ), specularPower ) * intens;

    //float d = oren_nayar( V, N, L, 0.9 );
    float d = NdotL;

    // Color changing with time

#ifdef INSTAGRAM_API
    float3 diffuseTerm = float3( d ) * diffuse.rgb * colorTexel.rgb;
#endif

#ifdef TWITTER_API
    //float rand = nrand( float2(Time*0.1, Time*0.02 ) + worldPosition.xy*0.1 );
    float3 col1 = diffuse.rgb;
    float3 col2 = float3( 110.0/255.0, 228.0/255.0, 1.0 ) * 1.5;

    float brightness = (sin( worldPosition.y*0.1 + (worldPosition.x)*0.1 + Time*4.23 ) * 0.5 + 0.5);
    float3 newDiffuse = mix( col1, col2, brightness*brightness*doColorAnimation ) * diffuse.rgb;
    float3 diffuseTerm = float3( d ) * newDiffuse.rgb * colorTexel.rgb;
#endif

#ifdef NYTIMES_API
    // boost particle color a little bit
    float3 diffuseTerm = float3( d ) * diffuse.rgb * colorTexel.rgb * float3( 1.25 );
#endif

#ifdef AMAZON_API
    float3 diffuseTerm = float3( d ) * diffuse.rgb * colorTexel.rgb;
#endif

#ifdef LASTFM_API
    float3 diffuseTerm = float3( d ) * diffuse.rgb * colorTexel.rgb;
#endif


    float3 specularTerm = float3( specular );

    FinalColor.rgb = ( diffuseTerm*LightColor + specularTerm ) * diffuse.a;
    FinalColor.a *= colorTexel.a * AlphaIntensity;

    //gl_FragColor = float4( doColorAnimation, 1.0, 0.0, 1.0 );
    gl_FragColor.rgb = ToSRGB( FinalColor.rgb );
    gl_FragColor.a = FinalColor.a;
}
//</script>