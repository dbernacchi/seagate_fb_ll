/**
 *
 * Description of product_configurator The ProductConfigurator is repsonsible
 * for merging the information from DR with the infomation from VCM and
 * outputting it to the screen. The configurator drives the image gallery on the
 * product page, and narrow or expands the user available options according to
 * her selections. For more detail on what exactly it does please see the
 * Functional Specifications document.
 *
 * The configurator is a jQuery plugin that has 3 major functions and a few
 * additional smaller support functions. I'll cover the 3 main ones in this
 * description as the small ones are support functions and will be summarized in
 * a line or two directly in the function.
 *
 * function intialize() is called only once upon loading the page. It takes the
 * product info from VCM which is stored in the ProdutInfoStruct (PIS) json
 * object on the page and the json object that comes from DR and process them
 * into two arrays. One array of models and one of attributes. The attribute set
 * is a bit different from the attributes in the PIS as it holds additional
 * attributes specific to the presentation of the data rather then just
 * attributes of the product. it then calls the createHtml() function to to
 * build the skeleton of the configuator, and the refilter() which calls the
 * gallery.js and populates the configurator's skeleton with the content of the
 * two arrays.
 *
 * function createHtml () is called only once by the initialize function. It
 * builds the html skeleton for the configurator and populates 3 of its
 * elements: colors, model pop ups and countries for WTB. createHtml uses
 * "labels" extensively. It is an object of strings that gets generated by jsp
 * so that a locale specific set of string is availalbe to work with.
 *
 * refilter() is where all the magic happens. it gets called by initialize and
 * then for every change to the selections moving forwards. The refiilter
 * functions is
 *
 *
 */
jQuery.fn.ProductConfigurator = function(method) {
	var options = {
		'url': '',
		'gallery': '#ALGContainer',
		'quick_links': false,
		'tab': {
			title: ''
		},
		'type': {
			title: '',
			img: ''
		},
		'onlybuy': false,
		'compare_url': ''
	};

	var container = $(this);
	var selections = [];
	var attributes = [];
	var models = [];
	var gallery_model_id = null;
	var modelList = [];
	var standart_model_id = null;
	var default_model_id = null;
	var selected_model_id = null;
	var prev_model_number = null;
	var new_selection = null;
	var standard_model_number = null;
	var default_model_number = null;
	var standart_model = false;
	var default_model = false;
	var default_sku_id = null;
	var default_sku_number = null;
	var selected_model = null;;
	var single_model = true;
	var single_model_id = null;
	var gallery_models = [];
	var releaseImages = null;
	var foundModels = [];
	var colorCodes = null;
	var allChoosed = true;
	var inAgain = false;
	var withColor = false;
	var displayGallery = false;
	var distiCountry = "US";
	var relatedAccessories = [];
	var locale = $("#localeId").val();
	var productId = $("#productIds").val();
	var comparisonEnabledLocale = false;
	var wtb_resellers_data = "";
	var wtb_data_country_code = "";
	//comparisonEnabledLocale = true;// do not send live
	var hidedisti = false;
	var RGID = getRGID(rclocale, "xml");

    var selectedCountryCode = UserCountryCode; //user country code is in the grid and generated by IP detect.
	if (typeof(ProductInfoStruct.releaseList[0].hidedisti) != 'undefined') hidedisti = ProductInfoStruct.releaseList[0].hidedisti;
	//hidedisti = false; //do not send live
	if (ProductInfoStruct.releaseList[0].blocks.comparisonBlock === true) comparisonEnabledLocale = true;
	
	// If anything was listed in the DR id's list, this is an ecommerceProduct
	// and will have the "buy" block.
	if (productId !== '') {
		ecommerceProduct = true;
		for (var f = 0; f < ProductInfoStruct.releaseList[0].modelList.length + ProductInfoStruct.releaseList[0].relatedAccessories.length; f++) {
			if (typeof(jsonData[f]) != 'undefined') {
				if (typeof(jsonData[f].error) != 'undefined') {
					jsonData[f] = JSON.parse('{"productID":' + jsonData[f].productID + ',"price":{"taxIncludedInPrice":false,"discounted":false,"unitPrice":"$0","unitPriceWithDiscount":"$0"},"stockStatus":"Out of Stock"}');
				}
			} else {
				jsonData[f] = JSON.parse('{"productID":0,"price":{"taxIncludedInPrice":false,"discounted":false,"unitPrice":"$0","unitPriceWithDiscount":"$0"},"stockStatus":"Out of Stock"}');
			}
		}
	} else {
		// populate products that are not ecommerce (no productId's on page)
		// with dummy data
		jsonDefault(jsonData);
	}
	// vd
	var methods = {
		init: function(custom_options) {
			$.extend(options, custom_options);
			// The only reason we use ajax is to take advantage of asynchronous
			// execution. straight invoking of initialize(), results in cusel
			// issues.
			$.ajax({
				url: "/ww/js/cuselhandler.js",
				dataType: 'script',
				success: initialize,
				error: initialize
			});
			return this;
		}
	};
	if (methods[method]) {
		return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
	} else if (typeof method === 'object' || !method) {
		return methods.init.apply(this, arguments);
	} else {
		$.error('Method ' + method + ' does not exist on jQuery.ProductConfigurator');
	}

	function initialize() {
		// This var gets initialized multiple times as a method of empytying the
		// arrays as you loop through the models.
		var gallery_part = {
			'model': '',
			'altText': [],
			'thumbnails': [],
			'medium': [],
			'large': [],
			'types': []
		};
		jsonData = eval(jsonData);
		if (typeof(jsonData) != 'object') {
			// load dummy data of no valid json found
			jsonData = jsonDefault(jsonData);
		}
		// vd
		jsonDefault(jsonData);
		var found_images = true; // found product level("release") images.
		if (typeof(window.ProductInfoStruct) !== "undefined") {
			// hmmm.... why do we process the locale here from the product info
			// struct and above from var locale=$("#localeId").val(); ????
			if (typeof(ProductInfoStruct.releaseList[0].locale) !== "undefined") locale = ProductInfoStruct.releaseList[0].locale;
			if (locale !== null) {
				var lang = locale.substring(0, 2);
				var geog = locale.substring(3, 5);
			}
            /**
            ************** Build the array of attributes
            *****************************
            */
			for (i = 0; i < ProductInfoStruct.releaseList[0].attributes.length; i++) {
				// This is the array of attributes that gets processed every
				// time we refilter the configurator
				var attribute = {
					"mastername": ProductInfoStruct.releaseList[0].attributes[i].mastername,
					"name": ProductInfoStruct.releaseList[0].attributes[i].name,
					"title": ProductInfoStruct.releaseList[0].attributes[i].title,
					"tooltip": ProductInfoStruct.releaseList[0].attributes[i].tooltip,
					"subitem": ProductInfoStruct.releaseList[0].attributes[i].subitem,
					"filter": null,
					"justclosed": false,
					"filterreason": null,
					"values": []
				};
				// flagging for later processing gallery images differently than
				// when no colors.
				if (attribute.mastername == 'colors-master-parent-feat') withColor = true;
				attributes.push(attribute);
			}
             /**
             ************** END Build the array of attributes
             *****************************
             */
             /**
             ************** Build the default image set for the
            *gallery****************************
            */
			// get the default set of images for the product and populate into
			// the gallery object. Later, when processing models, we do it again
			// with the models array.
			// This is not built with the models, because there is no need for
			// this to be in a loop.
			if (typeof(ProductInfoStruct.releaseList[0].gallery) !== "undefined" && typeof(ProductInfoStruct.releaseList[0].galleryThumbnail) !== "undefined" && typeof(ProductInfoStruct.releaseList[0].galleryLarge) !== "undefined") {
				for (m = 0; m < ProductInfoStruct.releaseList[0].gallery.length; m++) {
					gallery_part.medium.push(ProductInfoStruct.releaseList[0].gallery[m].src);
					gallery_part.types.push(typeof(ProductInfoStruct.releaseList[0].gallery[m].type) !== "undefined" ? ProductInfoStruct.releaseList[0].gallery[m].type : "image");
				}
				for (m = 0; m < ProductInfoStruct.releaseList[0].galleryThumbnail.length; m++) {
					// if a thumbnail is found display the gallery
					if (ProductInfoStruct.releaseList[0].galleryThumbnail[m].src !== "" && !displayGallery) displayGallery = true;
					gallery_part.thumbnails.push(ProductInfoStruct.releaseList[0].galleryThumbnail[m].src);
				}
				for (m = 0; m < ProductInfoStruct.releaseList[0].galleryLarge.length; m++) {
					gallery_part.large.push(ProductInfoStruct.releaseList[0].galleryLarge[m].src);
				}
				if (typeof(ProductInfoStruct.releaseList[0].galleryAltText) !== "undefined") {
					for (m = 0; m < ProductInfoStruct.releaseList[0].galleryAltText.length; m++) {
						gallery_part.altText.push(ProductInfoStruct.releaseList[0].galleryAltText[m].alttext);
					}
				}
				gallery_part.model = 'default'; // This is the default images
				// set. Not images of the
				// "standard model"
				gallery_models.push(gallery_part);
			}
			/**
             ************** Build the default image set for the
             *gallery****************************
             */
             /**
             ************** Build the array of
             *models****************************
             */
			for (i = 0; i < ProductInfoStruct.releaseList[0].modelList.length; i++) {
				var prId = null;
				for (n = 0; n < jsonData.length; n++) {
					if (jsonData[n].productID == ProductInfoStruct.releaseList[0].modelList[i].drProductId) {
						prId = n;
						break;
					}
				}
				// standard model can be reached through link, and caonfigurator
				// defaults to it, except if overridden by
				// a productSku passed in the url.
				if (ProductInfoStruct.releaseList[0].modelList[i].standardModel) {
					standart_model_id = i;
					standart_model = true;
					standard_model_number = ProductInfoStruct.releaseList[0].modelList[i].modelNumber;
				}
				if (typeof(productSku) != "undefined" && ProductInfoStruct.releaseList[0].modelList[i].modelNumber == productSku) {
					default_sku_id = i;
					default_model = true;
					default_sku_number = ProductInfoStruct.releaseList[0].modelList[i].modelNumber;
				}
				var discountedPrice = 0;
				if (prId !== null && typeof(jsonData[prId].price) !== "undefined" && typeof(jsonData[prId].price.unitPriceWithDiscount) !== "undefined") {
					discountedPrice = jsonData[prId].price.unitPriceWithDiscount.replace('$', '');
				}
				var discounted = "false";
				if (prId !== null && typeof(jsonData[prId].price) !== "undefined" && typeof(jsonData[prId].price.discounted) !== "undefined") discounted = jsonData[prId].price.discounted;
				var backorderable = false;
				if (typeof(ProductInfoStruct.releaseList[0].modelList[i].backorderable) !== "undefined") backorderable = ProductInfoStruct.releaseList[0].modelList[i].backorderable;
				var stockStatus = 'Not available';
				var stockMessage = '';
				var realPrice = '$0';
				if (prId !== null) {
					realPrice = jsonData[prId].price.unitPrice.replace('$', '');
					if (typeof(jsonData[prId].stockStatus) !== "undefined") {
						stockStatus = jsonData[prId].stockStatus;
					}
				}
				if (stockStatus.toLowerCase() == "in stock") stockMessage = 'In stock';
				else if (stockStatus.toLowerCase() == "electronic download") stockMessage = 'Electronic download';
				else if (stockStatus.toLowerCase() == "pre-order") stockMessage = 'Pre order';
				else if (stockStatus.toLowerCase() == "out of stock") stockMessage = 'Not available';
				else if (backorderable && stockStatus.toLowerCase() == "out of stock") stockMessage = 'Backorder';
				var model = {
					'number': ProductInfoStruct.releaseList[0].modelList[i].modelNumber,
					'standart': standart_model,
					'price': realPrice,
					'discountedPrice': discountedPrice,
					'discounted': discounted,
					'stockStatus': stockStatus,
					'backorderable': backorderable,
					'stockMessage': stockMessage,
					'productId': ProductInfoStruct.releaseList[0].modelList[i].drProductId,
					'attributes': []
				};
				for (k = 0; k < attributes.length; k++) {
					if (attributes[k].subitem === null) {
						if (typeof(ProductInfoStruct.releaseList[0].modelList[i][attributes[k].name]) !== "undefined") {
							if ($.inArray(ProductInfoStruct.releaseList[0].modelList[i][attributes[k].name], attributes[k].values) == -1 && ProductInfoStruct.releaseList[0].modelList[i][attributes[k].name] !== '') {
								attributes[k].values.push(ProductInfoStruct.releaseList[0].modelList[i][attributes[k].name]);
							}
							model.attributes.push({
								'id': k,
								'value': ProductInfoStruct.releaseList[0].modelList[i][attributes[k].name]
							});
						}
					} else {
						if (typeof(ProductInfoStruct.releaseList[0].modelList[i][attributes[k].name]) !== "undefined" && ProductInfoStruct.releaseList[0].modelList[i][attributes[k].name][attributes[k].subitem] !== undefined) {
							if ($.inArray(ProductInfoStruct.releaseList[0].modelList[i][attributes[k].name][attributes[k].subitem], attributes[k].values) == -1 && ProductInfoStruct.releaseList[0].modelList[i][attributes[k].name][attributes[k].subitem] !== '') {
								attributes[k].values.push(ProductInfoStruct.releaseList[0].modelList[i][attributes[k].name][attributes[k].subitem]);
							}
							model.attributes.push({
								'id': k,
								'value': ProductInfoStruct.releaseList[0].modelList[i][attributes[k].name][attributes[k].subitem]
							});
						}
					}
				}
				colorCodes = ProductInfoStruct.releaseList[0].colorsList;
                 /**
                 ************** Build the gallery object for all of the
                 * models****************************
                 */
				// except default/release level images which we already built
				// above
				if (options.gallery !== null) {
					if ($.inArray(ProductInfoStruct.releaseList[0].modelList[i].model, foundModels) == -1) {
						foundModels.push(ProductInfoStruct.releaseList[0].modelList[i].modelNumber);
						var gallery_part = {
							'model': ProductInfoStruct.releaseList[0].modelList[i].modelNumber,
							'altText': [],
							'thumbnails': [],
							'medium': [],
							'large': [],
							'types': []
						};
						if (typeof(ProductInfoStruct.releaseList[0].modelList[i].gallery) !== "undefined" && typeof(ProductInfoStruct.releaseList[0].modelList[i].galleryThumbnail) !== "undefined" && typeof(ProductInfoStruct.releaseList[0].modelList[i].galleryLarge) !== "undefined") {
							for (m = 0; m < ProductInfoStruct.releaseList[0].modelList[i].gallery.length; m++) {
								gallery_part.medium.push(ProductInfoStruct.releaseList[0].modelList[i].gallery[m].src);
								gallery_part.types.push(typeof(ProductInfoStruct.releaseList[0].modelList[i].gallery[m].type) !== "undefined" ? ProductInfoStruct.releaseList[0].modelList[i].gallery[m].type : "image");
							}
							for (m = 0; m < ProductInfoStruct.releaseList[0].modelList[i].galleryThumbnail.length; m++) {
								// if a thumbnail is found display the gallery
								if (ProductInfoStruct.releaseList[0].modelList[i].galleryThumbnail[m].src != "" && !displayGallery) displayGallery = true;
								gallery_part.thumbnails.push(ProductInfoStruct.releaseList[0].modelList[i].galleryThumbnail[m].src);
							}
							for (m = 0; m < ProductInfoStruct.releaseList[0].modelList[i].galleryLarge.length; m++) {
								gallery_part.large.push(ProductInfoStruct.releaseList[0].modelList[i].galleryLarge[m].src);
							}
							if (typeof(ProductInfoStruct.releaseList[0].modelList[i].galleryAltText) !== "undefined") {
								for (m = 0; m < ProductInfoStruct.releaseList[0].modelList[i].galleryAltText.length; m++) {
									gallery_part.altText.push(ProductInfoStruct.releaseList[0].modelList[i].galleryAltText[m].alttext);
								}
							}
							if (typeof(ProductInfoStruct.releaseList[0].gallery) !== "undefined" && typeof(ProductInfoStruct.releaseList[0].galleryThumbnail) !== "undefined" && typeof(ProductInfoStruct.releaseList[0].galleryLarge) !== "undefined") {
								for (m = 0; m < ProductInfoStruct.releaseList[0].gallery.length; m++) {
									if (typeof(ProductInfoStruct.releaseList[0].gallery[m].type) !== "undefined" && ProductInfoStruct.releaseList[0].gallery[m].type == "video") {
										gallery_part.medium.push(ProductInfoStruct.releaseList[0].gallery[m].src);
										gallery_part.types.push(ProductInfoStruct.releaseList[0].gallery[m].type);
									}
								}
								for (m = 0; m < ProductInfoStruct.releaseList[0].galleryThumbnail.length; m++) {
									if (typeof(ProductInfoStruct.releaseList[0].galleryThumbnail[m].type) !== "undefined" && ProductInfoStruct.releaseList[0].galleryThumbnail[m].type == "video") {
										gallery_part.thumbnails.push(ProductInfoStruct.releaseList[0].galleryThumbnail[m].src);
									}
								}
								for (m = 0; m < ProductInfoStruct.releaseList[0].galleryLarge.length; m++) {
									if (typeof(ProductInfoStruct.releaseList[0].galleryLarge[m].type) !== "undefined" && ProductInfoStruct.releaseList[0].galleryLarge[m].type == "video") {
										gallery_part.large.push(ProductInfoStruct.releaseList[0].galleryLarge[m].src);
									}
								}
								if (typeof(ProductInfoStruct.releaseList[0].galleryAltText) !== "undefined") {
									for (m = 0; m < ProductInfoStruct.releaseList[0].galleryAltText.length; m++) {
										if (typeof(ProductInfoStruct.releaseList[0].galleryAltText[m].type) !== "undefined" && ProductInfoStruct.releaseList[0].galleryAltText[m].type == "video") {
											gallery_part.altText.push(ProductInfoStruct.releaseList[0].galleryAltText[m].alttext);
										}
									}
								}
							}
							gallery_part.model = ProductInfoStruct.releaseList[0].modelList[i].modelNumber;
							gallery_models.push(gallery_part);
						} else if (releaseImages == null) {
							found_images = false;
							if (options.gallery !== null && !found_images) $(options.gallery).hide();
							options.gallery = null;
							container.data('options', options);
						}
					}
				}
				/**
				 * ************* EndBuild the gallery object for all of the
				 * models****************************
				 */
				models.push(model);
			}
			/**
			 * ************* End Build the array of
			 * models****************************
			 */
			/**
			 * ************* Define the default
			 * model****************************
			 */
			if (ProductInfoStruct.releaseList[0].modelList.length > 0) {
				if (default_sku_id != null) {
					default_model_id = default_sku_id;
					default_model_number = default_sku_number;
				} else if (standart_model_id != null) {
					default_model_id = standart_model_id;
					default_model_number = standard_model_number;
				} else if (ProductInfoStruct.releaseList[0].external) {
					default_model_id = ProductInfoStruct.releaseList[0].modelList.length - 1;
					default_model_number = ProductInfoStruct.releaseList[0].modelList[default_model_id].modelNumber;
				} else {
					default_model_id = 0;
					default_model_number = ProductInfoStruct.releaseList[0].modelList[0].modelNumber;
				}
			}
			// reset the vars to default's
			default_sku_id = default_model_id;
			default_sku_number = default_model_number;
			standart_model_id = default_model_id;
			standard_model_number = default_model_number;
			new_selection = default_model_number;
			/**
			 * ************* End Define the default
			 * model****************************
			 */
			if (models.length == 1) ProductInfoStruct.releaseList[0].blocks.attributesBlock = false;
			createHtml();
			if (comparisonEnabledLocale) assignButton_CountrySelect();
			// This fires off the Gallery on init.
			if (options.gallery != null) {
				// set the default gallery object set
				if (default_model_number == null && standard_model_number == null) {
					default_model_number = "default";
				} else if (default_model_number == null) {
					default_model_number = standard_model_number;
				}
				$(options.gallery).ALGGallery({
					'elements': gallery_models,
					'defaultModel': default_model_number
				});
			}
			if (!displayGallery) {
				$('div.ALGImage').css('display', 'none');
				$('div.ALGText').css('width', '641px');
				$('li.ALGZoom').css('display', 'none');
			}
			if (models.length > 0) {
				assignButton_ConfiguratorParam();
			}
			if (default_model_id !== null) {
				for (k = 0; k < models[default_model_id].attributes.length; k++) {
					attributes[models[default_model_id].attributes[k].id].filter = models[default_model_id].attributes[k].value;
				}
			}
			if (models.length > 0) {
				setSelections(default_model_number, "bob");
			}
			var counter = 0;
			// div to be hidden unless valid sku was found
			for (k = 0; k < models.length; k++) {
				if (models[k].number) {
					$('div.infoGoods').show();
					counter++;
				}
			}
			// if only one model was found hide the other blocks.
			if (counter === 1) {
				$('.modelItems').show();
			}
			if (counter > 0) {
				refilter();
			}
		} else {
			container.parent('div').hide();
		}
	}
	// called by initialize, this function builds the skeleton of the
	// configurator.

	function createHtml() {
	    var html_options1 = "";
	    var html_options2 = "";
	    
		var html = "<form action=\"http://shop.seagate.com/store\" method=\"GET\" class=\"AddToCartForm\" onSubmit=\"return emptyNull()\">\n";
		html += "<input type=\"hidden\" id=\"compareModelIndex\" name=\"compareIndex\" />\n";
		html += "<fieldset>\n";
		// not sure if onlybuy ever turns true.
		if (!options.onlybuy) {
			html += "<!-- !SELECT OPTIONS/MODEL -->\n";
			html += "<div class=\"selectModel clearfix\"> \n";
			html += "<div class=\"customBlock config-options rsPadBox clearfix\">\n";
			html += "<strong class=\"heading standard-model\">" + labels.select_options + "</strong> \n";
			html += "<div class=\"customBlock clearfix\" id=\"configuratorContent\">\n";
			for (i = 0; i < attributes.length; i++) {
				if (attributes[i].values.length > 0) {
					html += "<div class=\"itemOption\" id=\"itemOption_" + attributes[i].name + "\">\n";
					html += "<ul class=\"list\">\n";
					html += "<li>\n";
					html += "<div class=\"string\">" + attributes[i].title + "\n";
					if (attributes[i].tooltip != "") {
						html += "<span class=\"tooltipHolder\">\n";
						html += "<a href=\"#\" class=\"question\">&nbsp;</a>\n";
						html += "<span class=\"tooltip\">\n";
						html += "<div class=\"bgHolder\">\n";
						html += attributes[i].tooltip + "\n";
						html += "</div>\n";
						html += "<span class=\"arrow\">&nbsp;</span>\n";
						html += "</span>\n";
						html += "</span>\n";
					}
					html += "</div>\n";
					html += "</li>\n";
					html += "</ul>";
					// the colors section gets built a bit differently as it
					// display bg colors instead of text and hides 'li's instead
					// of grey them out.
					// if (attributes[i].mastername ==
					// 'colors-master-parent-feat') html += "<ul
					// class=\"subListPic clearfix\">\n";
					html += "<ul class=\"subList clearfix\">\n";
					for (k = 0; k < attributes[i].values.length; k++) {
						if (attributes[i].values[k] == labels.none) {
							var buf = attributes[i].values[k];
							attributes[i].values.splice(k, 1);
							attributes[i].values.push(buf);
							break;
						}
					}
					for (k = 0; k < attributes[i].values.length; k++) {
						html += "<li class=\"disabled\"><a class=\"configurator_param\" href=\"#\" rel=\"" + i + "\" val=\"" + attributes[i].values[k].replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, '') + "\">" + attributes[i].values[k] + "</a></li>\n";
					}
					html += "</ul>\n";
					html += "</div>\n";
				}
			}
			html += "</div>\n";
			html += "</div>\n";
		}
		html += "<div class=\"resellersBlock rsPadBox clearfix\">\n";
		html += "<div class=\"modelItems\">\n";
		// insert models here
		html += "</div>\n";


//html for reseller section.
        var countryCodeStr = $("#countryCodes").val();
		var countryCode = countryCodeStr.split('|');
		var countryStr = $("#countryNames").val();
		var countryName = countryStr.split('|');
        if(comparisonEnabledLocale) {  // if not a ci locale but comparison is enabled.
        	html += "<div class=\"rsPadRoundBox resellersPulldown \">\n";
			html += "<div class=\"findDistributorForm\">\n";
			html += "<select id=\"ResellerCountry\" name=\"ResellerCountry\" title=\"ResellerCountry\" tabindex=\"1\">\n";
			for (var u = 0; u < countryName.length; u++) {
				if (UserCountryCode == countryCode[u]) {
					html_options1 += "<option value=" + countryCode[u] + " selected=\"selected\">" + countryName[u] + "</option>\n";
				} else {
					html_options1 += "<option value=" + countryCode[u] + ">" + countryName[u] + "</option>\n";
				}
			}
	
			html += "</select>\n";
			html += "</div>\n";//end findDistributorForm div
			html += "</div>\n"; 
			
			html += "<ul class=\"resellersContent\">\n";
			//		resellesrs go here
			html += "</ul>\n";
		} 
		html += "</div>\n";

		// html for WTB section

		if (hidedisti === false) {
			html += "<div class=\"findDistributor rsPadBox\">\n";
			html += "<strong class=\"heading\">" + labels.find_a_distributor + "</strong>\n";
			html += "<div class=\"rsPadRoundBox\">\n";
			html += "<div class=\"findDistributorForm\">\n";
			html += "<select id=\"country\" name=\"country\" title=\"country\" tabindex=\"1\">\n";
			//html += "<select>";
			
			for (var u = 0; u < countryName.length; u++) {
				if ($("#countryDefault").val() == countryCode[u]) {
					html_options2 += '<option value="' + countryCode[u] + '" selected>' + countryName[u] + '</option>\n';

				} else {
					html_options2 += '<option value="' + countryCode[u] + '">' + countryName[u] + '</option>\n';

				}
			}
			html += "</select>\n";
			html += "</div>\n";
			//html += "<a href=\"http://wheretobuy.seagate.com/www_worp_disti_large_volumes?language=en-us&country=US\"  class=\"rsBtn btnSearchDistributor distributorsList\" id=\"configuratorFind\">" + labels.find + "</a>\n";
			html += "<a href=\"/ww/jsp/product/distiModal.jsp\"  class=\"rsBtn btnSearchDistributor distributorsList\" id=\"configuratorFind\">" + labels.find + "</a>\n";
			html += "</div>\n";
			html += "</div>\n"; //end findDistributor div
		}
				html += "</div>\n";
		html += "</div>\n";
		html += "</fieldset>\n";
		html += "</form>\n";
		container.html(html);
		$('#ResellerCountry').html(html_options1);	
		$('#country').html(html_options2);
		var params = {
			changedEl: "#ResellerCountry",
			visRows: 10,
			scrollArrows: true
		}
//		cuSel(params);

			params = {
			changedEl: "#country",
			visRows: 10,
			scrollArrows: true
		}
//		cuSel(params);
		
		if (hidedisti === false) {
			$("#configuratorFind").fancybox({
				'padding': 0,
				'autoScale': false,
				'transitionIn': 'none',
				'transitionOut': 'none',
				'onComplete': function() {
					getDistributors(document.getElementById('country').value);
				}
			});
		}
		
	}
	// Add to cart on click if button is not greyed out.

	function assignButton_ConfiguratorParam() {
		container.find('.configurator_param').click(function(event) {
			event.preventDefault();
			// if (!$(this).parent('li').hasClass('disabled'))
			// {
			// alert(2);
			var id = $(this).attr('rel');
			var value = $(this).attr('val');
			getColorModel(value);
			attributes[id].filter = value;
			// refilter();
			setSelections(id.toString(), value.toString());
			refilter();
			// }
		});
	}
	
		function assignButton_CountrySelect() {
		container.find('#ResellerCountry').change(function(event) {
			//event.preventDefault();
			// suppressing the click on selected params for expanding the configurator.
			getResellersByType($('#ResellerCountry').val());
		});
	}

	function setSelections(id, val) {
		// we assume there will never be more than 10 attributes.
		single_model = true;
		var modelHtml = null;
		var modelAlert = null;
		var clear_selections = false;
		var selected = [];
		var unique = null;
		var bob = [];
		var default_selections = [];
		selections.length = 0;
		if (selected_model_id == null) {
			selected_model_id = default_model_id;
		}
		if (id.length == 1) {
			if ($('.configurator_param[rel=' + id + ']').filter($('.configurator_param[val="' + val + '"]')).parent('li').hasClass('disabled')) {
				$('.configurator_param[rel=' + id + ']').parent().removeClass('selected');
				$('.configurator_param[rel=' + id + ']').filter($('.configurator_param[val="' + val + '"]')).parent('li').removeClass('disabled');
				$('.configurator_param[rel=' + id + ']').filter($('.configurator_param[val="' + val + '"]')).parent('li').addClass('selected');
				if (!getSelectedModelNumber(id)) {
					modelHtml = "<p class=\"rsPadRoundBox modelNumber\">\n";
					modelHtml += "<span class=\"title\">" + labels.model_number + ":</span>\n";
					modelHtml += "<span class=\"modelNotSelected\">" + labels.not_selected + "</span>\n";
					modelHtml += "</p>\n";
					modelHtml += "<p class=\"rsPadRoundBox modelAlertMessage\">" + labels.select_value + "</p>\n";
					$('.modelItems').html(modelHtml);
					if(RGID.length == 4){		//if a valid CI domain
						$('.resellersContent').empty();
					}
					$('.moreResellersBtn').remove();
					clear_selections = true;
				} else {
					id = getSelectedModelNumber(id);
					selected_model_id = getSelectedModelId(id);
					single_model = true;
					modelList.length = 0;
					for (i = 0; i < attributes.length; i++) {
						$('.configurator_param[rel=' + i + ']').parent('li').removeClass('selected');
						$('.configurator_param[rel=' + i + ']').parent('li').addClass('disabled');
						if (i != id) {
							attributes[i].filter = null;
						}
					}
					setSelections(id, "bob");
					return; // prevent continuing from here when done.
				}
			}
		}
		// Remove all selections, enable/select current selection and run again.
		if (clear_selections) {
			for (i = 0; i < attributes.length; i++) {
				$('.configurator_param[rel=' + i + ']').parent('li').removeClass('selected');
				$('.configurator_param[rel=' + i + ']').parent('li').addClass('disabled');
				if (i != id) {
					attributes[i].filter = null;
				}
			}
			// re-enable current choice.
			$('.configurator_param[rel=' + id + ']').filter($('.configurator_param[val="' + val + '"]')).parent('li').removeClass('disabled')
			modelList.length = 0;
			// since we started a new selection round, all model are possible
			// matches so resetting the eligible models to the full set.
			for (k = 0; k < models.length; k++) {
				modelList.push(models[k]);
			}
			// run again with the new selection and complete set of models
			setSelections(id, val);
		}
		// if id.length is greater than 1 that means we passed the model number
		// as the id and this gets processed differently
		if (id.length > 1) {
			// it's a single model so it's the only one that will match.
			modelList.push(models[selected_model_id]);
		} else {
			// if id ==1 than an attribute got clicked and we need to reset the
			// array of matching models. building temp array - bob.
			for (k = 0; k < modelList.length; k++) {
				var attribute_value = modelList[k].attributes[id].value;
				// we have issues with jquery selector unable to handle special
				// characters, so replacing.
				attribute_value = attribute_value.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, '');
				if (attribute_value == val) {
					bob.push(modelList[k]);
				}
			}
		}
		// resetting the matched models array by clearing it and transferring
		// bob to it.
		if (modelList.length > 1) {
			modelList.length = 0;
			for (k = 0; k < bob.length; k++) {
				modelList.push(bob[k]);
			}
		}
		// buid an array of the attribute values that are still available based
		// on the remaining models list.
		if (models.length > 0) {
			for (i = 0; i < attributes.length; i++) {
				selections[i] = [];
				for (k = 0; k < modelList.length; k++) {
					selections[i][k] = modelList[k].attributes[i].value;
					selections[i][k] = selections[i][k].replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, '');
				}
			}
		}
		// process the selections and disbale, whiten, or select as needed.
		for (j = 0; j < attributes.length; j++) {
			var availableCount = 0;
			// If the attribute is the one that was just clicked greyout the
			// whole row and then whiten and select what was just clicked.
			if (j == id) {
				$('.configurator_param[rel=' + j + ']').parent('li').removeClass('selected');
				$('.configurator_param[rel=' + j + ']').parent('li').addClass('disabled');
				$('.configurator_param[rel=' + j + ']').filter($('.configurator_param[val="' + val + '"]')).parent('li').removeClass('disabled');
				$('.configurator_param[rel=' + j + ']').filter($('.configurator_param[val="' + val + '"]')).parent('li').addClass('selected');
			} else {
				// grey out the row by adding the disabled class.
				var attributeContainer = $('.configurator_param[rel=' + j + ']').parent('li');
				attributeContainer.addClass('disabled');
				// iterate through all anchor elements in attribute row
				$('.configurator_param[rel=' + j + ']').each(function(index) {
					// re-enable any selection that matches the remaining models.
					for (l = 0; l < selections[j].length; l++) {
						if ($.inArray(selections[j], $(this).attr('val'))) {
							// console.log("Remove disabled
							// from:"+$(this).attr('val'));
							$('.configurator_param[rel=' + j + ']').filter($('.configurator_param[val="' + selections[j][l] + '"]')).parent('li').removeClass('disabled');
						}
					}
					if ($(this).parent('li').hasClass('disabled') == false) {
						availableCount++;
					}
				});
				// If only one option is left, add the "selected" class to it.
				if (availableCount == 1) {
					$('.configurator_param[rel=' + j + ']').each(function(index) {
						if ($(this).parent('li').hasClass('disabled') == false) {
							$(this).parent('li').addClass('selected');
							attributes[j].filter = $(this).attr('val').replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, '');
						}
					});
				}
			}
		}
		// set the classes to display the attributes for a single model.
		if (id.length > 1) {
			for (k = 0; k < attributes.length; k++) {
				default_selections[k] = models[selected_model_id].attributes[k].value;
				default_selections[k] = default_selections[k].replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, '');
				$('.configurator_param[rel=' + k + ']').filter($('.configurator_param[val="' + default_selections[k] + '"]')).parent('li').addClass('selected');
			}
		}
		// if we still have an unselected attribute, the value of single_model
		// will switch to false
		for (k = 0; k < attributes.length; k++) {
			single_model = $('.configurator_param[rel=' + k + ']').parent('li').hasClass('selected');
			if (single_model == false) {
				break;
			}
		}
		// if single model is true, get it, build the html for the models block,
		// and refilter with allChoosed.
		if (single_model || id.length > 1) {
			// $('.modelItems').show();
			new_selection = getSelectedModelNumber(selected_model_id);
			allChoosed = true;
			for (k = 0; k < models.length; k++) {
				if (models[k].number == selected_model) {
					single_model_id = k;
					break;
				}
			}
			if (comparisonEnabledLocale && (prev_model_number == null || prev_model_number.indexOf(new_selection) == -1)) {
				prev_model_number = new_selection;
				getResellersByType(selectedCountryCode);
				resetSidebarPosition();
			} else {
				prev_model_number = "none";
			}
		} else {
			// $('.modelItems').hide();
			allChoosed = false;
			prev_model_number = "none";
		}
	}

	function getSelectedModelNumber(id) {
		var current_selections = [];
		selected_model = null;
		var selected_models = [];
		var modelHtml = null;
		// id can be an attribute or a model number.
		if (id.length > 1) {
			selected_model = id;
			modelHtml = "<p class=\"rsPadRoundBox modelNumber\">\n";
			modelHtml += "<span class=\"title\">" + labels.model_number + ":</span>\n";
			modelHtml += " <span id=\"modelItem_" + selected_model + "\">" + selected_model + "</span>\n";
			modelHtml += "</p>\n";
			$('.modelItems').html(modelHtml);
		} else {
			for (i = 0; i < attributes.length; i++) {
				$('.configurator_param[rel=' + i + ']').each(function(index) {
					if ($(this).parent('li').hasClass('selected')) {
						current_selections.push($(this).text());
						// all_selected++;
						// alert(current_selections[i]);
					}
				});
			}
			// if all we have passed in is the attribute id, then we loop
			// through the models and figure which model matches our selections.
			if (current_selections.length == attributes.length) {
				for (k = 0; k < models.length; k++) {
					var complete_match = 0;
					for (i = 0; i < attributes.length; i++) {
						if (current_selections[i] == models[k].attributes[i].value) {
							complete_match++;
						}
					}
					// if we found the matching model build the models block
					// with it.
					if (complete_match == attributes.length) {
						selected_model = models[k].number;
						modelHtml = "<p class=\"rsPadRoundBox modelNumber\">\n";
						modelHtml += "<span class=\"title\">" + labels.model_number + ":</span>\n";
						modelHtml += " <span id=\"modelItem_" + selected_model + "\">" + selected_model + "</span>\n";
						modelHtml += "</p>\n";
						$('.modelItems').html(modelHtml);
						break;
					}
				}
			}
		}
		// alert(selected_model);
		return selected_model;
	}

	function getSelectedModelId(selected_model_number) {
		for (k = 0; k < models.length; k++) {
			if (models[k].number == selected_model_number) {
				selected_model_id = k;
			}
		}
		return selected_model_id;
	}

	function getColorModel(color) {
		var color_model = null;
		for (i = 0; i < ProductInfoStruct.releaseList[0].modelList.length; i++) {
			if (typeof(ProductInfoStruct.releaseList[0].modelList[i].colors_master_parent_feat) != 'undefined' && typeof(ProductInfoStruct.releaseList[0].modelList[i].colors_master_parent_feat.colors_master_parent_feat_name) != 'undefined') {
				if (ProductInfoStruct.releaseList[0].modelList[i].colors_master_parent_feat.colors_master_parent_feat_name == color) {
					color_model = ProductInfoStruct.releaseList[0].modelList[i].modelNumber;
					gallery_model_id = i;
				}
			}
		}
		if (gallery_model_id != null && typeof(ProductInfoStruct.releaseList[0].modelList[gallery_model_id].gallery) !== "undefined" && typeof(ProductInfoStruct.releaseList[0].modelList[gallery_model_id].galleryThumbnail) !== "undefined" && ProductInfoStruct.releaseList[0].modelList[gallery_model_id].galleryThumbnail.length == 0) {
			color_model = "default";
			gallery_model_id = 0;
		}
		return color_model;
	}

	function confirmDecimals(price) {
		if(/\d/.test(price)){
			if (price.indexOf('.') == -1) {
				price = price + ".00";
			} else if (price.length - price.indexOf('.') == 2) {
				price = price + "0";
			}
		}
		return price;
	}

	function getChannelIntelligence(selectedModelNumber) {
		// if(comparisonEnabledLocale){
		var no_price_locales = ["DE", "FR", "AU", "CN", "SG", "IN"];  
		var vendors = [];
		var stock = "In Stock";
		var seagate_id = null;
		
		$.ajax({
			beforeSend: function(jqXHR, settings) {
				// Setup "loading" message
				$('.resellersContent').empty();
				$('.moreResellersBtn').remove();
				$('.resellersContent').append('<p class="rsPadRoundBox modelAlertMessage modelLoadingMessage">' + labels.wait_message + '</p>');
			},
			url: '/ww/jsp/common/ajax.jsp?sku=' + selectedModelNumber + '&rgid=' + RGID + '&sct=' + CI_LinkID,
			success: function(data) {
				$('.modelAlert').empty();
				$('.resellersContent').empty();
				$('.moreResellersBtn').remove();
				$(data).find('DEALER_ITEM').each(function(index) {
					var vendor = {
						'id': $(this).find('DEALER_ID').text(),
						'availability': $(this).find('AVAILABILITY').text(),
						'price': $(this).find('PRICE').text(),
						'buy_url': $(this).find('BUY_URL').text(),
						'logo': ''
					}
					vendors.push(vendor);
				});
				
				if (typeof(vendors[0]) != 'undefined') {
					var max_vendors = vendors.length;
					if (max_vendors > 5) max_vendors = 5;
					for (i = 0; i < vendors.length; i++) {
						//if(vendors[i].id.indexOf('11302') != -1 && vendors[i].availability.indexOf('YES') != -1){
						if (vendors[i].id.indexOf('285659589') != -1 && (vendors[i].availability.indexOf('YES') != -1 || vendors[i].availability.indexOf('Order') != -1)) {
							if (vendors[i].availability.indexOf('Order') != -1) {
								stock = vendors[i].availability;
							}
							vendors[i].name = $(data).find('DEALER[id="' + vendors[i].id + '"]').find('DEALER_NAME').text();
							vendors[i].logo = $(data).find('DEALER[id="' + vendors[i].id + '"]').find('DEALER_LOGO').text();
							$('.resellersContent').append('<li class="resellerItem resellerSeagate clearfix"><img width="60" "height="40" src="' + vendors[i].logo + '" alt="' + vendors[i].name + '" class="rsLogo" /><div class="rsPrice"><p>' + confirmDecimals(vendors[i].price) + '</p></div><div class="rsBuy"><p class="stockStatus">' + stock + '</p><a class="rsBtn" target="_blank" href="' + vendors[i].buy_url + '">ADD to CART</a></div></li>');
						}
					}
					for (i = 0; i < max_vendors; i++) {
						if (vendors[i].id.indexOf('285659589') == -1) {
							vendors[i].name = $(data).find('DEALER[id="' + vendors[i].id + '"]').find('DEALER_NAME').text();
							vendors[i].logo = $(data).find('DEALER[id="' + vendors[i].id + '"]').find('DEALER_LOGO').text();
							$('.resellersContent').append('<li class="resellerItem clearfix"><img width="60" height="40" src="' + vendors[i].logo + '" alt="' + vendors[i].name + '" class="rsLogo" /><div class="rsPrice"><p>' + confirmDecimals(vendors[i].price) + '</p></div><div class="rsBuy"><a class="rsBtn" target="_blank" href="' + vendors[i].buy_url + '">' + labels.buy_now + '</a></div></li>');
						} else if (vendors.length > max_vendors) {
							max_vendors++;
						}
					}
					for(j = 0; j < no_price_locales.length; j++){
						if (no_price_locales[j] ==  selectedCountryCode) {
							$('.rsPrice').html('&nbsp;');
							break;
						}
					}
				} else {
					if(wtb_resellers_data.length == 0 || wtb_data_country_code != selectedCountryCode){ 
							buildResellersDataVar(selectedCountryCode);
					}
					if (wtb_resellers_data.length > 5){
						$('.resellersContent').append(wtb_resellers_data);
					} else {
						$('.resellersContent').empty();
					}
				}
				if (typeof(vendors[i]) != 'undefined' && vendors.length > 5) {
					createResellersLink(new_selection);
				}
				resetSidebarPosition();
			}
		});
		// }
	}
	
	function buildResellersDataVar(country_code) {
	    wtb_resellers_data = "";
        var counter = 0;
		var vendors = [];
		if(country_code != wtb_data_country_code){

			$.ajax({
			    async : false,
				beforeSend: function(jqXHR, settings) {
					;
				},
				url: '/ww/jsp/common/ajax.jsp?country=' + country_code + '&sfdc=1',
				success: function(data) {  
					if($(data).find('DEALER').length > 0){
						$(data).find('DEALER').each(function(index) {
							var vendor = {
								'logo':  $(this).find('DEALER_LOGO').text(),
								'name': $(this).find('DEALER_NAME').text(),
								'buy_url': $(this).find('BUY_URL').text()
							}
							vendors.push(vendor);
					});
				
					if (typeof(vendors[0]) != 'undefined' ) {	
								
						for (i = 0; i < vendors.length; i++) {						
							 wtb_resellers_data += '<li class="resellerItem clearfix"><img height="40" width="120" src="' + vendors[i].logo + '" alt="' + vendors[i].name + '" class="rsLogo" /><div class="rsBuy"><a class="rsBtn" target="_blank" href="' + vendors[i].buy_url + '">' + labels.shop + '</a></div></li>';
						}
					}

				} else {
	                 wtb_resellers_data = "none";
				}
			},
			error: function(){
				 wtb_resellers_data = "none";
			}
		});
		wtb_data_country_code = country_code;
		
	}
	}

	function getColorPic(color) {
		var color_pic = null;
		for (i = 0; i < ProductInfoStruct.releaseList[0].modelList.length; i++) {
			if (typeof(ProductInfoStruct.releaseList[0].modelList[i].colors_master_parent_feat) != 'undefined' && typeof(ProductInfoStruct.releaseList[0].modelList[i].colors_master_parent_feat.colors_master_parent_feat_name) != 'undefined') {
				if (ProductInfoStruct.releaseList[0].modelList[i].colors_master_parent_feat.colors_master_parent_feat_name == color) {
					color_model = ProductInfoStruct.releaseList[0].modelList[i].modelNumber;
					if (typeof(ProductInfoStruct.releaseList[0].modelList[i].gallery[0]) != 'undefined' && ProductInfoStruct.releaseList[0].modelList[i].gallery[0].src != '') {
						color_pic = ProductInfoStruct.releaseList[0].modelList[i].gallery[0].src;
						break;
					} else {
						color_pic = ProductInfoStruct.releaseList[0].gallery[0].src;
					}
				}
			}
		}
		return color_pic;
	}


	// Rebuilds the configurator with current selection. This function also
	// fires on initial load.

	function refilter() {
		var uniqueColor = null;
		for (i = 0; i < attributes.length; i++) {
			// alert(attributes[i].values.length + " jjj " +
			// attributes[i].values[0]);
			if (attributes[i].values.length == 1) {
				// alert(attributes[i].values + " jjj");
				attributes[i].filter = attributes[i].values[0];
			}
		}
		if (attributes.length === 0) {
			$('.config-options').hide();
		} else if (attributes.length == 1) {
			$('.standard-model-').hide();
		} else {
			$('.config-options').show();
			$('.standard-model-').show();
		}
		var tempSelector;
		var singleSelectionFlag = false;
		var isDefaultSku = true;
		// var isStandart = true;
		var numChoosed = 0;
		// container.find('#configuratorSelected').find('ul').find('li').remove();
		var currHeroImgSrc = "";
		$("#itemOption_colors_master_parent_feat .configurator_param").live("mouseover", function() {
			$(".ALGImage img").attr("src", getColorPic($(this).attr("val")));
		});
		$("#itemOption_colors_master_parent_feat .configurator_param").live("mouseout", function() {
			$(options.gallery).ALGGallery('changeModel', ProductInfoStruct.releaseList[0].modelList[gallery_model_id].number);
		});
	/*
		$(document).on("mouseover","#itemOption_colors_master_parent_feat .configurator_param", function() {
			$(".ALGImage img").attr("src", getColorPic($(this).attr("val")));
		});
		$(document).on("mouseout", "#itemOption_colors_master_parent_feat .configurator_param", function() {
			$(options.gallery).ALGGallery('changeModel', ProductInfoStruct.releaseList[0].modelList[gallery_model_id].number);
		});
	*/
		for (i = 0; i < attributes.length; i++) {
			// if a standard model
			if (attributes[i].filter !== null && single_model_id !== null) {
				// if (attributes[i].filter !=
				// models[default_model_id].attributes[i].value) isStandart =
				// false;
				numChoosed++;
				if (attributes[i].mastername == "colors-master-parent-feat" && options.gallery !== null && withColor && attributes[i].filter != labels.none) {
					uniqueColor = attributes[i].filter;
					$(options.gallery).ALGGallery('changeModel', getColorModel(attributes[i].filter));
				} else if (withColor) {
					$(options.gallery).ALGGallery('changeModel', 'default');
					gallery_model_id = 0;
				}
			} else {
				default_model_id = 0;
				// numChoosed++;
				$('#itemOption_' + attributes[i].name).show();
				allChoosed = false;
				// isStandart = false;
				$(options.gallery).ALGGallery('changeModel', 'default');
				gallery_model_id = 0;
			}
		}
		container.find('#configuratorHeadingSelect').show();
		var selectedModelId = -1;
		var matchCount = 0;
		for (i = 0; i < models.length; i++) {
			var match = true;
			for (k = 0; k < models[i].attributes.length; k++) {
				if (attributes[models[i].attributes[k].id].filter !== null && models[i].attributes[k].value.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, '') != attributes[models[i].attributes[k].id].filter.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, '')) {
					match = false;
					break;
				}
			}
			if (match) {
				$("#modelItem_" + models[i].number).show();
				selectedModelId = single_model_id;
				// single_model++;
				matchCount++;
			}
			// This will assign the first selectedModel. After we exit the above
			// for loop, if it's still only one model
			// shown, that model will be passed to "changeModel" gallery
			// function.
			if (single_model === true && singleSelectionFlag === false) {
				selectedModelNumber = selected_model;
				singleSelectionFlag = true;
			}
		}
		if (single_model === true) {
			if (typeof(ProductInfoStruct.releaseList[0].modelList[selectedModelId]) !== "undefined" && typeof(ProductInfoStruct.releaseList[0].modelList[selectedModelId].gallery[0]) !== "undefined" && ProductInfoStruct.releaseList[0].modelList[selectedModelId].gallery[0].src !== '') {
				$(options.gallery).ALGGallery('changeModel', selectedModelNumber);
				gallery_model_id = selectedModelId;
			} else {
				$(options.gallery).ALGGallery('changeModel', 'default');
				gallery_model_id = 0;
			}
			if (single_model == false && uniqueColor !== null) {
				$(options.gallery).ALGGallery('changeModel', getColorModel(uniqueColor));
			}
		}
		var noAccessory = null;
		if (models.length === 1 && !(typeof(ProductInfoStruct.releaseList[0].blocks.attributesBlock) !== "undefined" && !ProductInfoStruct.releaseList[0].blocks.attributesBlock)) {
			$('#configuratorHeadingSelect').hide();
		} else {
			if (typeof(ProductInfoStruct.releaseList[0].blocks) != "undefined" && !(typeof(ProductInfoStruct.releaseList[0].blocks.attributesBlock) !== "undefined" && !ProductInfoStruct.releaseList[0].blocks.attributesBlock)) $('#configuratorContent').show();
			resetSidebarPosition();
		}
	}

	function createResellersLink(selectedModelNumber) {
		/*
		 * This function calls Channel Intelligence's JavaScript API to generate
		 * the button link at the bottom of the product configurator. It
		 * requires a model number (sku) to be passed and also leverages the
		 * ciLocaleMap and rclocale global variables to pass the correct api
		 * parameters.
		 */
		var embedRGID = getRGID(rclocale, 'embed');
		$.getScript("http://seagate.links.channelintelligence.com/scripts/cii_CBL_DataService.asp?sSKU=" + selectedModelNumber + "&nRGID=" + embedRGID, function(data, textStatus, jqxhr) {
			// Remove any existing button
			$('.moreResellersBtn').remove();
			//var ciButtonScript = "cii_ShowCBLButton('" + selectedModelNumber + "', oCIIPrimaryLink, oCIIAlternateLink, 1, " + embedRGID + ");";
			
            var ciButtonScript = "cii_ShowCBLButton('" + selectedModelNumber + "', oCIIPrimaryLink, oCIIAlternateLink, 1, '" + embedRGID + "', CI_LinkID);"
			var ciButtonScriptOutput = eval(ciButtonScript);
			// If button is returned, build our own HTML for it
			if (ciButtonScriptOutput.length > 0) {
				var ciButtonHTML = "";
				for (var i = 0; i < 3; i++) {
					if (i === 2) {
						ciButtonScriptOutput[i] = ciButtonScriptOutput[i].replace('>', ' class="moreResellersBtn">');
					}
					ciButtonHTML += ciButtonScriptOutput[i];
				}
				ciButtonHTML += labels.more_resellers + "</a>";
				// $.when($('.resellersContent').after(ciButtonHTML)).then($("div.sideBar_productInfoTop").css('margin-top',
				// $("#productConfigurator").height()));
				$.when($('.resellersContent').after(ciButtonHTML)).then(resetSidebarPosition());
			}
		});
	}
	
	function getResellersByType(country_code) {
        
 	 	var wtbLocaleMap = {"wtb_countries":[
       {'wtb_country':'SG', 'locale':'en-sg'},
       {'wtb_country':'CN', 'locale':'zh-cn'},
       {'wtb_country':'US', 'locale':'en-us'},
       {'wtb_country':'TR', 'locale':'tr-tr'},
       {'wtb_country':'RU', 'locale':'ru-ru'},
       {'wtb_country':'ES', 'locale':'es-es'},
       {'wtb_country':'DE', 'locale':'de-de'},
       {'wtb_country':'FR', 'locale':'fr-fr'},
       {'wtb_country':'AU', 'locale':'en-au'},
       {'wtb_country':'BR', 'locale':'pt-br'},
       {'wtb_country':'GB', 'locale':'en-gb'},
       {'wtb_country':'IN', 'locale':'en-in'},
	   {'wtb_country':'CA', 'locale':'en-ca'},
	   {'wtb_country':'KR', 'locale':'ko-kr'},
       {'wtb_country':'TW', 'locale':'zh-tw'},
       {'wtb_country':'JP', 'locale':'ja-jp'},
       {'wtb_country':'IT', 'locale':'it-it'},
       {'wtb_country':'PL', 'locale':'pl-pl'},
       {'wtb_country':'ID', 'locale':'id-id'},
		]};
		
		for (var i = 0; i < wtbLocaleMap.wtb_countries.length; i++) {
			if (typeof(wtbLocaleMap.wtb_countries[i]) != 'undefined' && wtbLocaleMap.wtb_countries[i].wtb_country == country_code) {
			 	RGID = getRGID(wtbLocaleMap.wtb_countries[i].locale, 'xml');
			 	break;
			}else{
				RGID = 'noRGID';
			}
		 }
		 if(selected_model != null){
		 	if(RGID.length == 4){
		 	 	getChannelIntelligence(selected_model);
		 	}else{
		 		getResellers(country_code);
		 	}	 	
		 }
		 selectedCountryCode = country_code;	
	}
};

	function getRGID(locale, type) {
		/*
		 * This function returns the RGID (Channel Intelligence code) for the
		 * locale that is passed. Assumes locale is in "en-us" format. It
		 * requires the ciLocaleMap global variable (which stores the codes) to
		 * exist. If no locale is passed it returns null.
		 */
		if (!locale) {
			return null;
		} else {
			for (var i = 0; i < ciLocaleMap.locales.length; i++) {
				if (typeof(ciLocaleMap.locales[i]) != 'undefined' && ciLocaleMap.locales[i].name.indexOf(locale) != -1) {
					if (type.indexOf('xml') != -1) {
						return ciLocaleMap.locales[i].xml;
					} else if (type.indexOf('embed') != -1) {
						return ciLocaleMap.locales[i].embed;
					} else {
						return "noRGID";
					}

				}
			}
			return "noRGID";
		}
	}




function getDistributors(country) {
	$('#DistiModal').load('/ww/distributorData?locale=' + rclocale + '&country=' + country + '&modal=bob .section', function() {});
}

function getResellers(resellerCountryCode) {
		var vendors = [];
		$.ajax({
			beforeSend: function(jqXHR, settings) {
				$('.resellersContent').empty();
			},
			url: '/ww/jsp/common/ajax.jsp?country=' + resellerCountryCode + '&sfdc=1',
			success: function(data) {  
				$('.modelAlert').empty();
				$('.resellersContent').empty();
				if($(data).find('DEALER').length > 0){
					$(data).find('DEALER').each(function(index) {
						var vendor = {
							'logo':  $(this).find('DEALER_LOGO').text(),
							'name': $(this).find('DEALER_NAME').text(),
							'buy_url': $(this).find('BUY_URL').text()
						}
						vendors.push(vendor);
					});
				
					if (typeof(vendors[0]) != 'undefined' ) {				
						for (i = 0; i < vendors.length; i++) {
							$('.resellersContent').append('<li class="resellerItem clearfix"><img height="40" src="' + vendors[i].logo + '" alt="' + vendors[i].name + '" class="rsLogo" /><div class="rsBuy"><a class="rsBtn" target="_blank" href="' + vendors[i].buy_url + '">' + labels.shop + '</a></div></li>');
						}
					}

				} else {
						$('.resellersContent').empty();
						//$('.resellersPulldown').remove();
				}
				resetSidebarPosition();
			},
			error: function(){
				$('.resellersContent').empty();
				//$('.resellersPulldown').remove();
			}
		});
}
function resetSidebarPosition() {
	if (configuratorCollapsed == false || configuratorCollapsed == null) {
			$("div.sideBar_productInfoTop").css('margin-top', $("#productConfigurator").height());
	}
}

function updateDistributor(value) {
	$('#distributorsList').load('/ww/distributorData?country=' + value + '&locale=' + rclocale + ' .section', function() {
		activateCusel();
	});
}

function activateCusel() {
	var params = {
		changedEl: ".regionFrm select",
		visRows: 5,
		scrollArrows: true
	};
	cuSel(params);
}
//click trigger for pushing down grid4 div when config is changed
$("#productConfigurator").click(function() {
	$("div.sideBar_productInfoTop").css('margin-top', $("#productConfigurator").height());
});

function jsonDefault(jsonData) {
	jsonData = [];
	for (var g = 0; g < ProductInfoStruct.releaseList[0].modelList.length + ProductInfoStruct.releaseList[0].relatedAccessories.length; g++) {
		if (ProductInfoStruct.releaseList[0].modelList.length + ProductInfoStruct.releaseList[0].relatedAccessories.length == 1) {
			jsonData = '[{"productID":0,"price":{"taxIncludedInPrice":false,"discounted":false,"unitPrice":"$0","unitPriceWithDiscount":"$0"},"stockStatus":"Out of Stock"}]';
		} else if (g === 0) {
			jsonData = '[{"productID":0,"price":{"taxIncludedInPrice":false,"discounted":false,"unitPrice":"$0","unitPriceWithDiscount":"$0"},"stockStatus":"Out of Stock"},';
		} else if (g == ProductInfoStruct.releaseList[0].modelList.length + ProductInfoStruct.releaseList[0].relatedAccessories.length - 1) {
			jsonData += '{"productID":0,"price":{"taxIncludedInPrice":false,"discounted":false,"unitPrice":"$0","unitPriceWithDiscount":"$0"},"stockStatus":"Out of Stock"}]';
		} else {
			jsonData += '{"productID":0,"price":{"taxIncludedInPrice":false,"discounted":false,"unitPrice":"$0","unitPriceWithDiscount":"$0"},"stockStatus":"Out of Stock"},';
		}
	}
	return eval(jsonData);
}